# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rbb_swagger_server.models.base_model_ import Model
from rbb_swagger_server import util


class BagExtractionConfiguration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, description: str=None, type: str=None, config: object=None):  # noqa: E501
        """BagExtractionConfiguration - a model defined in Swagger

        :param name: The name of this BagExtractionConfiguration.  # noqa: E501
        :type name: str
        :param description: The description of this BagExtractionConfiguration.  # noqa: E501
        :type description: str
        :param type: The type of this BagExtractionConfiguration.  # noqa: E501
        :type type: str
        :param config: The config of this BagExtractionConfiguration.  # noqa: E501
        :type config: object
        """
        self.swagger_types = {
            'name': str,
            'description': str,
            'type': str,
            'config': object
        }

        self.attribute_map = {
            'name': 'name',
            'description': 'description',
            'type': 'type',
            'config': 'config'
        }

        self._name = name
        self._description = description
        self._type = type
        self._config = config

    @classmethod
    def from_dict(cls, dikt) -> 'BagExtractionConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BagExtractionConfiguration of this BagExtractionConfiguration.  # noqa: E501
        :rtype: BagExtractionConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this BagExtractionConfiguration.

        Name of the configuration  # noqa: E501

        :return: The name of this BagExtractionConfiguration.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BagExtractionConfiguration.

        Name of the configuration  # noqa: E501

        :param name: The name of this BagExtractionConfiguration.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this BagExtractionConfiguration.

        Description of this configuration  # noqa: E501

        :return: The description of this BagExtractionConfiguration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this BagExtractionConfiguration.

        Description of this configuration  # noqa: E501

        :param description: The description of this BagExtractionConfiguration.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def type(self) -> str:
        """Gets the type of this BagExtractionConfiguration.

        Type of the configuration. (only git is supported now)  # noqa: E501

        :return: The type of this BagExtractionConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this BagExtractionConfiguration.

        Type of the configuration. (only git is supported now)  # noqa: E501

        :param type: The type of this BagExtractionConfiguration.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def config(self) -> object:
        """Gets the config of this BagExtractionConfiguration.

        Data that is specific to the configuration type.  # noqa: E501

        :return: The config of this BagExtractionConfiguration.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config: object):
        """Sets the config of this BagExtractionConfiguration.

        Data that is specific to the configuration type.  # noqa: E501

        :param config: The config of this BagExtractionConfiguration.
        :type config: object
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config
