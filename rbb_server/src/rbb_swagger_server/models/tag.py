# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rbb_swagger_server.models.base_model_ import Model
from rbb_swagger_server import util


class Tag(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, tag: str=None, color: str=None):  # noqa: E501
        """Tag - a model defined in Swagger

        :param tag: The tag of this Tag.  # noqa: E501
        :type tag: str
        :param color: The color of this Tag.  # noqa: E501
        :type color: str
        """
        self.swagger_types = {
            'tag': str,
            'color': str
        }

        self.attribute_map = {
            'tag': 'tag',
            'color': 'color'
        }

        self._tag = tag
        self._color = color

    @classmethod
    def from_dict(cls, dikt) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tag of this Tag.  # noqa: E501
        :rtype: Tag
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tag(self) -> str:
        """Gets the tag of this Tag.


        :return: The tag of this Tag.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag: str):
        """Sets the tag of this Tag.


        :param tag: The tag of this Tag.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def color(self) -> str:
        """Gets the color of this Tag.


        :return: The color of this Tag.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this Tag.


        :param color: The color of this Tag.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501

        self._color = color
