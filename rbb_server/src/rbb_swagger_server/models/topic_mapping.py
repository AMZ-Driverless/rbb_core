# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rbb_swagger_server.models.base_model_ import Model
from rbb_swagger_server import util


class TopicMapping(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, original_topic: str=None, plugin_topic: str=None):  # noqa: E501
        """TopicMapping - a model defined in Swagger

        :param original_topic: The original_topic of this TopicMapping.  # noqa: E501
        :type original_topic: str
        :param plugin_topic: The plugin_topic of this TopicMapping.  # noqa: E501
        :type plugin_topic: str
        """
        self.swagger_types = {
            'original_topic': str,
            'plugin_topic': str
        }

        self.attribute_map = {
            'original_topic': 'original_topic',
            'plugin_topic': 'plugin_topic'
        }

        self._original_topic = original_topic
        self._plugin_topic = plugin_topic

    @classmethod
    def from_dict(cls, dikt) -> 'TopicMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TopicMapping of this TopicMapping.  # noqa: E501
        :rtype: TopicMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def original_topic(self) -> str:
        """Gets the original_topic of this TopicMapping.

        The name of the original topic  # noqa: E501

        :return: The original_topic of this TopicMapping.
        :rtype: str
        """
        return self._original_topic

    @original_topic.setter
    def original_topic(self, original_topic: str):
        """Sets the original_topic of this TopicMapping.

        The name of the original topic  # noqa: E501

        :param original_topic: The original_topic of this TopicMapping.
        :type original_topic: str
        """
        if original_topic is None:
            raise ValueError("Invalid value for `original_topic`, must not be `None`")  # noqa: E501

        self._original_topic = original_topic

    @property
    def plugin_topic(self) -> str:
        """Gets the plugin_topic of this TopicMapping.

        Plugin topic name  # noqa: E501

        :return: The plugin_topic of this TopicMapping.
        :rtype: str
        """
        return self._plugin_topic

    @plugin_topic.setter
    def plugin_topic(self, plugin_topic: str):
        """Sets the plugin_topic of this TopicMapping.

        Plugin topic name  # noqa: E501

        :param plugin_topic: The plugin_topic of this TopicMapping.
        :type plugin_topic: str
        """
        if plugin_topic is None:
            raise ValueError("Invalid value for `plugin_topic`, must not be `None`")  # noqa: E501

        self._plugin_topic = plugin_topic
