# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rbb_swagger_server.models.base_model_ import Model
from rbb_swagger_server.models.file_summary import FileSummary  # noqa: F401,E501
from rbb_swagger_server import util


class FileDetailed(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, detail_type: str=None, store_name: str=None, uid: int=None, name: str=None, link: str=None, store_data: object=None):  # noqa: E501
        """FileDetailed - a model defined in Swagger

        :param detail_type: The detail_type of this FileDetailed.  # noqa: E501
        :type detail_type: str
        :param store_name: The store_name of this FileDetailed.  # noqa: E501
        :type store_name: str
        :param uid: The uid of this FileDetailed.  # noqa: E501
        :type uid: int
        :param name: The name of this FileDetailed.  # noqa: E501
        :type name: str
        :param link: The link of this FileDetailed.  # noqa: E501
        :type link: str
        :param store_data: The store_data of this FileDetailed.  # noqa: E501
        :type store_data: object
        """
        self.swagger_types = {
            'detail_type': str,
            'store_name': str,
            'uid': int,
            'name': str,
            'link': str,
            'store_data': object
        }

        self.attribute_map = {
            'detail_type': 'detail_type',
            'store_name': 'store_name',
            'uid': 'uid',
            'name': 'name',
            'link': 'link',
            'store_data': 'store_data'
        }

        self._detail_type = detail_type
        self._store_name = store_name
        self._uid = uid
        self._name = name
        self._link = link
        self._store_data = store_data

    @classmethod
    def from_dict(cls, dikt) -> 'FileDetailed':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FileDetailed of this FileDetailed.  # noqa: E501
        :rtype: FileDetailed
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail_type(self) -> str:
        """Gets the detail_type of this FileDetailed.


        :return: The detail_type of this FileDetailed.
        :rtype: str
        """
        return self._detail_type

    @detail_type.setter
    def detail_type(self, detail_type: str):
        """Sets the detail_type of this FileDetailed.


        :param detail_type: The detail_type of this FileDetailed.
        :type detail_type: str
        """
        if detail_type is None:
            raise ValueError("Invalid value for `detail_type`, must not be `None`")  # noqa: E501

        self._detail_type = detail_type

    @property
    def store_name(self) -> str:
        """Gets the store_name of this FileDetailed.

        Name of the file store  # noqa: E501

        :return: The store_name of this FileDetailed.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name: str):
        """Sets the store_name of this FileDetailed.

        Name of the file store  # noqa: E501

        :param store_name: The store_name of this FileDetailed.
        :type store_name: str
        """
        if store_name is None:
            raise ValueError("Invalid value for `store_name`, must not be `None`")  # noqa: E501

        self._store_name = store_name

    @property
    def uid(self) -> int:
        """Gets the uid of this FileDetailed.

        Unique file id  # noqa: E501

        :return: The uid of this FileDetailed.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid: int):
        """Sets the uid of this FileDetailed.

        Unique file id  # noqa: E501

        :param uid: The uid of this FileDetailed.
        :type uid: int
        """

        self._uid = uid

    @property
    def name(self) -> str:
        """Gets the name of this FileDetailed.

        Name of the file  # noqa: E501

        :return: The name of this FileDetailed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FileDetailed.

        Name of the file  # noqa: E501

        :param name: The name of this FileDetailed.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def link(self) -> str:
        """Gets the link of this FileDetailed.


        :return: The link of this FileDetailed.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link: str):
        """Sets the link of this FileDetailed.


        :param link: The link of this FileDetailed.
        :type link: str
        """

        self._link = link

    @property
    def store_data(self) -> object:
        """Gets the store_data of this FileDetailed.

        Store specific data  # noqa: E501

        :return: The store_data of this FileDetailed.
        :rtype: object
        """
        return self._store_data

    @store_data.setter
    def store_data(self, store_data: object):
        """Sets the store_data of this FileDetailed.

        Store specific data  # noqa: E501

        :param store_data: The store_data of this FileDetailed.
        :type store_data: object
        """
        if store_data is None:
            raise ValueError("Invalid value for `store_data`, must not be `None`")  # noqa: E501

        self._store_data = store_data
