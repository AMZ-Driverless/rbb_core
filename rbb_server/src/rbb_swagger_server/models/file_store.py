# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from rbb_swagger_server.models.base_model_ import Model
from rbb_swagger_server import util


class FileStore(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, store_type: str=None, store_data: object=None, created: datetime=None):  # noqa: E501
        """FileStore - a model defined in Swagger

        :param name: The name of this FileStore.  # noqa: E501
        :type name: str
        :param store_type: The store_type of this FileStore.  # noqa: E501
        :type store_type: str
        :param store_data: The store_data of this FileStore.  # noqa: E501
        :type store_data: object
        :param created: The created of this FileStore.  # noqa: E501
        :type created: datetime
        """
        self.swagger_types = {
            'name': str,
            'store_type': str,
            'store_data': object,
            'created': datetime
        }

        self.attribute_map = {
            'name': 'name',
            'store_type': 'store_type',
            'store_data': 'store_data',
            'created': 'created'
        }

        self._name = name
        self._store_type = store_type
        self._store_data = store_data
        self._created = created

    @classmethod
    def from_dict(cls, dikt) -> 'FileStore':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FileStore of this FileStore.  # noqa: E501
        :rtype: FileStore
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this FileStore.

        Name of the store  # noqa: E501

        :return: The name of this FileStore.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FileStore.

        Name of the store  # noqa: E501

        :param name: The name of this FileStore.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def store_type(self) -> str:
        """Gets the store_type of this FileStore.

        Type of store.  # noqa: E501

        :return: The store_type of this FileStore.
        :rtype: str
        """
        return self._store_type

    @store_type.setter
    def store_type(self, store_type: str):
        """Sets the store_type of this FileStore.

        Type of store.  # noqa: E501

        :param store_type: The store_type of this FileStore.
        :type store_type: str
        """
        if store_type is None:
            raise ValueError("Invalid value for `store_type`, must not be `None`")  # noqa: E501

        self._store_type = store_type

    @property
    def store_data(self) -> object:
        """Gets the store_data of this FileStore.

        Data that is specific to the store type.  # noqa: E501

        :return: The store_data of this FileStore.
        :rtype: object
        """
        return self._store_data

    @store_data.setter
    def store_data(self, store_data: object):
        """Sets the store_data of this FileStore.

        Data that is specific to the store type.  # noqa: E501

        :param store_data: The store_data of this FileStore.
        :type store_data: object
        """
        if store_data is None:
            raise ValueError("Invalid value for `store_data`, must not be `None`")  # noqa: E501

        self._store_data = store_data

    @property
    def created(self) -> datetime:
        """Gets the created of this FileStore.

        Date and time this store was added to the bazaar.  # noqa: E501

        :return: The created of this FileStore.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this FileStore.

        Date and time this store was added to the bazaar.  # noqa: E501

        :param created: The created of this FileStore.
        :type created: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created
