# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SimulationEnvironmentDetailed(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SimulationEnvironmentDetailed - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'detail_type': 'str',
            'name': 'str',
            'module_name': 'str',
            'rosbag_store': 'str',
            'config': 'object',
            'example_config': 'str'
        }

        self.attribute_map = {
            'detail_type': 'detail_type',
            'name': 'name',
            'module_name': 'module_name',
            'rosbag_store': 'rosbag_store',
            'config': 'config',
            'example_config': 'example_config'
        }

        self._detail_type = None
        self._name = None
        self._module_name = None
        self._rosbag_store = None
        self._config = None
        self._example_config = None

    @property
    def detail_type(self):
        """
        Gets the detail_type of this SimulationEnvironmentDetailed.


        :return: The detail_type of this SimulationEnvironmentDetailed.
        :rtype: str
        """
        return self._detail_type

    @detail_type.setter
    def detail_type(self, detail_type):
        """
        Sets the detail_type of this SimulationEnvironmentDetailed.


        :param detail_type: The detail_type of this SimulationEnvironmentDetailed.
        :type: str
        """
        self._detail_type = detail_type

    @property
    def name(self):
        """
        Gets the name of this SimulationEnvironmentDetailed.


        :return: The name of this SimulationEnvironmentDetailed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SimulationEnvironmentDetailed.


        :param name: The name of this SimulationEnvironmentDetailed.
        :type: str
        """
        self._name = name

    @property
    def module_name(self):
        """
        Gets the module_name of this SimulationEnvironmentDetailed.


        :return: The module_name of this SimulationEnvironmentDetailed.
        :rtype: str
        """
        return self._module_name

    @module_name.setter
    def module_name(self, module_name):
        """
        Sets the module_name of this SimulationEnvironmentDetailed.


        :param module_name: The module_name of this SimulationEnvironmentDetailed.
        :type: str
        """
        self._module_name = module_name

    @property
    def rosbag_store(self):
        """
        Gets the rosbag_store of this SimulationEnvironmentDetailed.


        :return: The rosbag_store of this SimulationEnvironmentDetailed.
        :rtype: str
        """
        return self._rosbag_store

    @rosbag_store.setter
    def rosbag_store(self, rosbag_store):
        """
        Sets the rosbag_store of this SimulationEnvironmentDetailed.


        :param rosbag_store: The rosbag_store of this SimulationEnvironmentDetailed.
        :type: str
        """
        self._rosbag_store = rosbag_store

    @property
    def config(self):
        """
        Gets the config of this SimulationEnvironmentDetailed.
        Configuration of the simulation environment.

        :return: The config of this SimulationEnvironmentDetailed.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this SimulationEnvironmentDetailed.
        Configuration of the simulation environment.

        :param config: The config of this SimulationEnvironmentDetailed.
        :type: object
        """
        self._config = config

    @property
    def example_config(self):
        """
        Gets the example_config of this SimulationEnvironmentDetailed.
        Example simulation configuration shown in the simulation overview

        :return: The example_config of this SimulationEnvironmentDetailed.
        :rtype: str
        """
        return self._example_config

    @example_config.setter
    def example_config(self, example_config):
        """
        Sets the example_config of this SimulationEnvironmentDetailed.
        Example simulation configuration shown in the simulation overview

        :param example_config: The example_config of this SimulationEnvironmentDetailed.
        :type: str
        """
        self._example_config = example_config

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

