# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class SimulationRunDetailed(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SimulationRunDetailed - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'detail_type': 'str',
            'identifier': 'int',
            'success': 'bool',
            'description': 'str',
            'duration': 'float',
            'bag_name': 'str',
            'bag_store_name': 'str',
            'results': 'object',
            'bag': 'BagSummary'
        }

        self.attribute_map = {
            'detail_type': 'detail_type',
            'identifier': 'identifier',
            'success': 'success',
            'description': 'description',
            'duration': 'duration',
            'bag_name': 'bag_name',
            'bag_store_name': 'bag_store_name',
            'results': 'results',
            'bag': 'bag'
        }

        self._detail_type = None
        self._identifier = None
        self._success = None
        self._description = None
        self._duration = None
        self._bag_name = None
        self._bag_store_name = None
        self._results = None
        self._bag = None

    @property
    def detail_type(self):
        """
        Gets the detail_type of this SimulationRunDetailed.


        :return: The detail_type of this SimulationRunDetailed.
        :rtype: str
        """
        return self._detail_type

    @detail_type.setter
    def detail_type(self, detail_type):
        """
        Sets the detail_type of this SimulationRunDetailed.


        :param detail_type: The detail_type of this SimulationRunDetailed.
        :type: str
        """
        self._detail_type = detail_type

    @property
    def identifier(self):
        """
        Gets the identifier of this SimulationRunDetailed.


        :return: The identifier of this SimulationRunDetailed.
        :rtype: int
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """
        Sets the identifier of this SimulationRunDetailed.


        :param identifier: The identifier of this SimulationRunDetailed.
        :type: int
        """
        self._identifier = identifier

    @property
    def success(self):
        """
        Gets the success of this SimulationRunDetailed.


        :return: The success of this SimulationRunDetailed.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """
        Sets the success of this SimulationRunDetailed.


        :param success: The success of this SimulationRunDetailed.
        :type: bool
        """
        self._success = success

    @property
    def description(self):
        """
        Gets the description of this SimulationRunDetailed.


        :return: The description of this SimulationRunDetailed.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SimulationRunDetailed.


        :param description: The description of this SimulationRunDetailed.
        :type: str
        """
        self._description = description

    @property
    def duration(self):
        """
        Gets the duration of this SimulationRunDetailed.


        :return: The duration of this SimulationRunDetailed.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """
        Sets the duration of this SimulationRunDetailed.


        :param duration: The duration of this SimulationRunDetailed.
        :type: float
        """
        self._duration = duration

    @property
    def bag_name(self):
        """
        Gets the bag_name of this SimulationRunDetailed.


        :return: The bag_name of this SimulationRunDetailed.
        :rtype: str
        """
        return self._bag_name

    @bag_name.setter
    def bag_name(self, bag_name):
        """
        Sets the bag_name of this SimulationRunDetailed.


        :param bag_name: The bag_name of this SimulationRunDetailed.
        :type: str
        """
        self._bag_name = bag_name

    @property
    def bag_store_name(self):
        """
        Gets the bag_store_name of this SimulationRunDetailed.


        :return: The bag_store_name of this SimulationRunDetailed.
        :rtype: str
        """
        return self._bag_store_name

    @bag_store_name.setter
    def bag_store_name(self, bag_store_name):
        """
        Sets the bag_store_name of this SimulationRunDetailed.


        :param bag_store_name: The bag_store_name of this SimulationRunDetailed.
        :type: str
        """
        self._bag_store_name = bag_store_name

    @property
    def results(self):
        """
        Gets the results of this SimulationRunDetailed.
        Configuration of the simulation.

        :return: The results of this SimulationRunDetailed.
        :rtype: object
        """
        return self._results

    @results.setter
    def results(self, results):
        """
        Sets the results of this SimulationRunDetailed.
        Configuration of the simulation.

        :param results: The results of this SimulationRunDetailed.
        :type: object
        """
        self._results = results

    @property
    def bag(self):
        """
        Gets the bag of this SimulationRunDetailed.
        Read only value, expanded on request.

        :return: The bag of this SimulationRunDetailed.
        :rtype: BagSummary
        """
        return self._bag

    @bag.setter
    def bag(self, bag):
        """
        Sets the bag of this SimulationRunDetailed.
        Read only value, expanded on request.

        :param bag: The bag of this SimulationRunDetailed.
        :type: BagSummary
        """
        self._bag = bag

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

