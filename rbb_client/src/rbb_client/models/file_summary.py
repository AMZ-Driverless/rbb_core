# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class FileSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FileSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'detail_type': 'str',
            'store_name': 'str',
            'uid': 'int',
            'name': 'str',
            'link': 'str'
        }

        self.attribute_map = {
            'detail_type': 'detail_type',
            'store_name': 'store_name',
            'uid': 'uid',
            'name': 'name',
            'link': 'link'
        }

        self._detail_type = None
        self._store_name = None
        self._uid = None
        self._name = None
        self._link = None

    @property
    def detail_type(self):
        """
        Gets the detail_type of this FileSummary.


        :return: The detail_type of this FileSummary.
        :rtype: str
        """
        return self._detail_type

    @detail_type.setter
    def detail_type(self, detail_type):
        """
        Sets the detail_type of this FileSummary.


        :param detail_type: The detail_type of this FileSummary.
        :type: str
        """
        self._detail_type = detail_type

    @property
    def store_name(self):
        """
        Gets the store_name of this FileSummary.
        Name of the file store

        :return: The store_name of this FileSummary.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """
        Sets the store_name of this FileSummary.
        Name of the file store

        :param store_name: The store_name of this FileSummary.
        :type: str
        """
        self._store_name = store_name

    @property
    def uid(self):
        """
        Gets the uid of this FileSummary.
        Unique file id

        :return: The uid of this FileSummary.
        :rtype: int
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """
        Sets the uid of this FileSummary.
        Unique file id

        :param uid: The uid of this FileSummary.
        :type: int
        """
        self._uid = uid

    @property
    def name(self):
        """
        Gets the name of this FileSummary.
        Name of the file

        :return: The name of this FileSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FileSummary.
        Name of the file

        :param name: The name of this FileSummary.
        :type: str
        """
        self._name = name

    @property
    def link(self):
        """
        Gets the link of this FileSummary.


        :return: The link of this FileSummary.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """
        Sets the link of this FileSummary.


        :param link: The link of this FileSummary.
        :type: str
        """
        self._link = link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

